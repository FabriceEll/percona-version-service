syntax="proto3";

package example;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// Defines the import path that should be used to import the generated package,
// and the package name.
option go_package = "github.com/Percona-Lab/percona-version-service/proto;example";

// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    version: "1.0";
  };
  external_docs: {
    url: "https://github.com/Percona-Lab/percona-version-service";
    description: "gRPC-gateway boilerplate repository";
  }
  schemes: HTTPS;
};

service UserService {
  rpc AddUser(EmptyRequest) returns (User) {
    option (google.api.http) = {
      // Route to this method from POST requests to /api/v1/users
      post: "/api/v1/users"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Add a user"
      description: "Add a user to the server."
      tags: "Users"
    };
  }
  rpc ListUsers(ListUsersRequest) returns (stream User) {
    option (google.api.http) = {
      // Route to this method from GET requests to /api/v1/users
      get: "/api/v1/users"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List users"
      description: "List all users on the server."
      tags: "Users"
    };
  }
}

service VersionService {
  rpc Apply(EmptyRequest) returns (VersionResponse) {
    option (google.api.http) = {
      // Route to this method from GET requests to /versions/v1/{product}/{operatorVersion}/{apply} 
      get: "/api/versions/v1/{product}/{operatorVersion}/{apply}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Specific version"
      description: "Return specific product version"
    };
  }
}

message EmptyRequest {
  string product = 1;
  string operatorVersion = 2;
  string apply = 3;
}

message ListUsersRequest {}

message User {
  string id = 1;
}

message Version {
  string imagepath = 1;
  string imagehash = 2;
  string status = 3;
  bool critilal = 4;
}

// message VersionMap {
//   map<string, Version> db = 1;
// }

message OperatorVersion {
  string operator = 1;
  string database = 2;
  message VersionMap {
    map<string, Version> value = 3;
  }
  map<string, VersionMap> matrix = 4;
}

message VersionResponse {
  repeated OperatorVersion versions = 1;
}
